// Code generated by MockGen. DO NOT EDIT.
// Source: cloth.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "hatflix/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClothService is a mock of ClothService interface.
type MockClothService struct {
	ctrl     *gomock.Controller
	recorder *MockClothServiceMockRecorder
}

// MockClothServiceMockRecorder is the mock recorder for MockClothService.
type MockClothServiceMockRecorder struct {
	mock *MockClothService
}

// NewMockClothService creates a new mock instance.
func NewMockClothService(ctrl *gomock.Controller) *MockClothService {
	mock := &MockClothService{ctrl: ctrl}
	mock.recorder = &MockClothServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClothService) EXPECT() *MockClothServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClothService) Create(ctx context.Context, Clothes *entity.Clothes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, Clothes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClothServiceMockRecorder) Create(ctx, Clothes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClothService)(nil).Create), ctx, Clothes)
}

// Get mocks base method.
func (m *MockClothService) Get(ctx context.Context, id *int) ([]*entity.Clothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].([]*entity.Clothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClothServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClothService)(nil).Get), ctx, id)
}

// GetByCategory mocks base method.
func (m *MockClothService) GetByCategory(ctx context.Context, categoryID int) ([]*entity.Clothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*entity.Clothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockClothServiceMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockClothService)(nil).GetByCategory), ctx, categoryID)
}

// GetByStore mocks base method.
func (m *MockClothService) GetByStore(ctx context.Context, restaurantID int) ([]*entity.Clothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStore", ctx, restaurantID)
	ret0, _ := ret[0].([]*entity.Clothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStore indicates an expected call of GetByStore.
func (mr *MockClothServiceMockRecorder) GetByStore(ctx, restaurantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStore", reflect.TypeOf((*MockClothService)(nil).GetByStore), ctx, restaurantID)
}

// Update mocks base method.
func (m *MockClothService) Update(ctx context.Context, Clothes *entity.Clothes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, Clothes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClothServiceMockRecorder) Update(ctx, Clothes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClothService)(nil).Update), ctx, Clothes)
}
