// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "hatflix/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStoreService is a mock of StoreService interface.
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService.
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance.
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStoreService) Create(ctx context.Context, Store *entity.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, Store)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreServiceMockRecorder) Create(ctx, Store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStoreService)(nil).Create), ctx, Store)
}

// Get mocks base method.
func (m *MockStoreService) Get(ctx context.Context, id *int) ([]*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].([]*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreService)(nil).Get), ctx, id)
}

// GetByCategory mocks base method.
func (m *MockStoreService) GetByCategory(ctx context.Context, categoryID int) ([]*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockStoreServiceMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockStoreService)(nil).GetByCategory), ctx, categoryID)
}

// Update mocks base method.
func (m *MockStoreService) Update(ctx context.Context, Store *entity.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, Store)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreServiceMockRecorder) Update(ctx, Store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoreService)(nil).Update), ctx, Store)
}
